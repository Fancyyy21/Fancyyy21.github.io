openapi: 3.1.0
info:
  title: Dokumentasi Api Fancyyy21 Maulana
  description: >-
    Disini ada semua api microservice dari (Fancyyy21) Maulana
  termsOfService: https://github.com/jscroot/examples/tree/main/api/swagger
  contact:
    email: imanulhaq5@gmail.com
  license:
    name: Fancy BackEnd
    url: https://pkg.go.dev/github.com/Fancyyy21/BackendGIS
  version: 1.0.11
externalDocs:
  description: Repo GCF
  url: https://github.com/Fancyyy21/BackendGIS
servers:
  - url: https://asia-southeast2-annular-hexagon-401501.cloudfunctions.net/signin-1fancy
  - url: https://asia-southeast2-annular-hexagon-401501.cloudfunctions.net/signup-1fancy
  - url: https://asia-southeast2-annular-hexagon-401501.cloudfunctions.net/postlinesting
paths:
  /getallUser:
    get:
      tags:
        - Get All User
      summary: Get Data Geospasial
      description: List Data Geospasial
      operationId: getGeoJSON
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Login'
        '400':
          description: Invalid status value

  /Login:
    post:
      tags:
        - user
      summary: Login get Token
      description: Login and Get User Token
      operationId: authService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '405':
          description: Invalid input
      security:
        - token:
          - write: apiKey
          - read: apiKey

  /LineString:
    post:
      tags:
        - GIS
      summary: LineString get Token
      description: LineString and Get Return
      operationId: postLineString
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '405':
          description: Invalid input
      security:
        - token:
          - write: apiKey
          - read: apiKey


  /Gis:
    get:
      tags:
        - Gis Location
      summary: Get Data Geospasial
      description: List Data Geospasial
      operationId: getGeoJSONGis
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peta'
        '400':
          description: Invalid status value

components:
  schemas:
    Peta:
      type: object
      properties:
        type:
          type: string
        geometry:
          type: object
          properties:
            type:
              type: string
            coordinates:
              type: array
        properties:
          type: object
          properties:
            name:
              type: string
    Auth:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin
    AuthResponse:
      type: object
      properties:
        status:
          type: bool
          example: true
        message:
          type: string
          example: Selamat Datang
        token:
          type: string
          example: v4.public.eyJleHAiOiIyMDIzLTEwLTMwVDA0OjE2OjI2WiIsImlhdCI6IjIwMjMtMTAtMzBUMDI6MTY6MjZaIiwiaWQiOiJhZG1pbiIsIm5iZiI6IjIwMjMtMTAtMzBUMDI6MTY6MjZaIn1QGpxEsXCNl5y17pSWSfvSXaME5gUPvxHTLsHlp4Ug-_vWPXtdDF2VxVTiEOuoycuIAt0p-rv8-TvAGNoz_WYM

    Login:
      type: object
      properties:
        username:
          type: string
          example: fancy
        password:
          type: string
          example: secret
        Role:
          type: string
          example: admin || user

    Delete:
      type: object
      properties:
        username:
          type: string
          example: "zz"
  requestBodies:
    AuthReq:
      description: Request Authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Auth'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthResponse'
  securitySchemes:
    token:
      type: apiKey
      name: token
      in: header
